(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.Sleet = {})));
}(this, (function (exports) { 'use strict';

  /*
   * Generated by PEG.js 0.10.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
      literal: function literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },

      "class": function _class(expectation) {
        var escapedParts = "",
            i;

        for (i = 0; i < expectation.parts.length; i++) {
          escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
        }

        return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
      },

      any: function any(expectation) {
        return "any character";
      },

      end: function end(expectation) {
        return "end of input";
      },

      other: function other(expectation) {
        return expectation.description;
      }
    };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function classEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i,
          j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},
        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction = peg$parsestart,
        peg$c0 = function peg$c0(declare, nodes) {
      return { nodes: flatSibling(nodes || []), indent: IDT_TOK || '', declaration: declare };
    },
        peg$c1 = "#!",
        peg$c2 = peg$literalExpectation("#!", false),
        peg$c3 = "=",
        peg$c4 = peg$literalExpectation("=", false),
        peg$c5 = function peg$c5(name, i) {
      return i;
    },
        peg$c6 = function peg$c6(name, ext, kv) {
      return kv;
    },
        peg$c7 = function peg$c7(name, ext, attr) {

      return new ast.Declaration(name, ext, attr, location());
    },
        peg$c8 = peg$anyExpectation(),
        peg$c9 = function peg$c9(key, value) {
      return { key: key, value: value };
    },
        peg$c10 = function peg$c10(start, node) {
      return node;
    },
        peg$c11 = function peg$c11(start, rest) {
      return rest.unshift(start) && rest;
    },
        peg$c12 = function peg$c12(p, c) {
      var cc = c.filter(function (it) {
        return it !== p.sibling;
      });
      if (!p.sibling) cc = flatSibling(cc);
      p._setChildren(cc);
      parents.pop();
      return p;
    },
        peg$c13 = function peg$c13(tag) {
      return parents.push(tag) && tag;
    },
        peg$c14 = function peg$c14(indent) {
      return indent === parent().indent + 1 ? true : false;
    },
        peg$c15 = function peg$c15(indent, node) {
      return node;
    },
        peg$c16 = /^[:>]/,
        peg$c17 = peg$classExpectation([":", ">"], false, false),
        peg$c18 = function peg$c18(node) {
      node._indent++;
      return node;
    },
        peg$c19 = "+",
        peg$c20 = peg$literalExpectation("+", false),
        peg$c21 = function peg$c21(node) {
      parent().sibling = node;
      node._indent++;
      return node;
    },
        peg$c22 = function peg$c22(text) {
      var p = parent();
      if (p.name === '|') {
        p._setText(text);
        return p;
      }

      var tag = new ast.Tag(IDT, '|', text.length === 1 ? 'inline' : null, [], null, [], null, location());
      tag._setText(text);
      return tag;
    },
        peg$c23 = function peg$c23() {
      IDT = 0;
    },
        peg$c24 = function peg$c24(indent) {
      return IDT = indent || 0;
    },
        peg$c25 = function peg$c25(ns, name, clazz, id, clazz2) {
      return name || clazz.length > 0 || id || clazz2.length > 0;
    },
        peg$c26 = function peg$c26(ns, name, clazz, id, clazz2, attrs, extra) {
      return new ast.Tag(IDT, name, ns, clazz.concat(clazz2), id, attrs, extra, location());
    },
        peg$c27 = "|",
        peg$c28 = peg$literalExpectation("|", false),
        peg$c29 = function peg$c29(ns, attrs) {
      return new ast.Tag(IDT, '|', ns, [], null, attrs, null, location());
    },
        peg$c30 = "#",
        peg$c31 = peg$literalExpectation("#", false),
        peg$c32 = function peg$c32() {
      return new ast.Tag(IDT, '#', null, [], null, [], null, location());
    },
        peg$c33 = ":",
        peg$c34 = peg$literalExpectation(":", false),
        peg$c35 = function peg$c35(name) {
      return name;
    },
        peg$c36 = ".",
        peg$c37 = peg$literalExpectation(".", false),
        peg$c38 = "@",
        peg$c39 = peg$literalExpectation("@", false),
        peg$c40 = function peg$c40(name, values) {
      return new ast.TagExtra(name, values, location());
    },
        peg$c41 = "(",
        peg$c42 = peg$literalExpectation("(", false),
        peg$c43 = function peg$c43(first, v) {
      return v;
    },
        peg$c44 = ")",
        peg$c45 = peg$literalExpectation(")", false),
        peg$c46 = function peg$c46(first, rest) {
      return rest.unshift(first) && rest;
    },
        peg$c47 = "..",
        peg$c48 = peg$literalExpectation("..", false),
        peg$c49 = function peg$c49() {
      textIndent = 0;return true;
    },
        peg$c50 = function peg$c50(text) {
      return text;
    },
        peg$c51 = function peg$c51() {
      textIndent = 1;return true;
    },
        peg$c52 = /^[:>+]/,
        peg$c53 = peg$classExpectation([":", ">", "+"], false, false),
        peg$c54 = function peg$c54(text) {
      return [text];
    },
        peg$c55 = function peg$c55(first, l) {
      return l;
    },
        peg$c56 = function peg$c56(first, rest) {
      rest.unshift(first);
      return rest;
    },
        peg$c57 = peg$otherExpectation("Tag text line"),
        peg$c58 = function peg$c58(indent) {
      if (!indent.length) return IDT === 0 && textIndent === 0;
      if (IDT_TOK === null) {
        IDT_TOK = indent.indexOf('\t') < 0 ? indent : '\t';
      }
      return indent.length >= (IDT + textIndent) * IDT_TOK.length;
    },
        peg$c59 = function peg$c59(indent, text) {
      var sp = indent.slice((IDT + textIndent) * (IDT_TOK || '').length);
      text.unshift(new ast.StaticText(sp, location()));
      return text;
    },
        peg$c60 = function peg$c60(w) {
      return w;
    },
        peg$c61 = function peg$c61(ws) {
      var sp = ws.slice((IDT + textIndent) * (IDT_TOK || '').length);
      return [new ast.StaticText(sp, location())];
    },
        peg$c62 = peg$otherExpectation("Text to end of line"),
        peg$c63 = "\\$",
        peg$c64 = peg$literalExpectation("\\$", false),
        peg$c65 = function peg$c65(c) {
      return '$' + c;
    },
        peg$c66 = "\\",
        peg$c67 = peg$literalExpectation("\\", false),
        peg$c68 = function peg$c68(c) {
      return text();
    },
        peg$c69 = function peg$c69(t) {
      return new ast.StaticText(t, location());
    },
        peg$c70 = "$",
        peg$c71 = peg$literalExpectation("$", false),
        peg$c72 = function peg$c72(name) {
      return new ast.DynamicText(name, location());
      return { type: 'dynamic', name: name };
    },
        peg$c73 = function peg$c73(name) {
      if (!name) new ast.StaticText('$', location());
      return new ast.DynamicText(name, location());
    },
        peg$c74 = function peg$c74(start, group) {
      return group;
    },
        peg$c75 = function peg$c75(attrs, settings) {
      return new ast.AttributeGroup(attrs, settings, location());
    },
        peg$c76 = function peg$c76(attrs, indent) {
      return (indent || '').length === IDT * IDT_TOK.length;
    },
        peg$c77 = function peg$c77(attrs, indent, settings) {
      return new ast.AttributeGroup(attrs, settings, location());
    },
        peg$c78 = function peg$c78(start, al) {
      return al;
    },
        peg$c79 = function peg$c79(start, rest) {
      return rest.reduce(function (acc, item) {
        return acc.concat(item);
      }, start);
    },
        peg$c80 = function peg$c80(indent) {
      if (IDT_TOK === null) {
        IDT_TOK = indent.indexOf('\t') < 0 ? indent : '\t';
      }
      return indent.length === (IDT + 1) * IDT_TOK.length;
    },
        peg$c81 = function peg$c81(indent, pairs) {
      return pairs;
    },
        peg$c82 = ",",
        peg$c83 = peg$literalExpectation(",", false),
        peg$c84 = function peg$c84(start, pair) {
      return pair;
    },
        peg$c85 = peg$otherExpectation("Attribute pair"),
        peg$c86 = function peg$c86(ns, key) {
      return new ast.Attribute(ns, key, [], location());
    },
        peg$c87 = function peg$c87(ns, key, v) {
      return v;
    },
        peg$c88 = function peg$c88(ns, key, value) {
      return new ast.Attribute(ns, key, value, location());
    },
        peg$c89 = function peg$c89(v) {
      return v;
    },
        peg$c90 = function peg$c90(value) {
      return new ast.Attribute(null, null, value, location());
    },
        peg$c91 = peg$otherExpectation("Attribute setting"),
        peg$c92 = "&",
        peg$c93 = peg$literalExpectation("&", false),
        peg$c94 = /^[#a-zA-Z0-9]/,
        peg$c95 = peg$classExpectation(["#", ["a", "z"], ["A", "Z"], ["0", "9"]], false, false),
        peg$c96 = ";",
        peg$c97 = peg$literalExpectation(";", false),
        peg$c98 = function peg$c98(name, c) {
      return c;
    },
        peg$c99 = function peg$c99(name, attrs) {
      return new ast.Setting(name, attrs, location());
    },
        peg$c100 = function peg$c100(start, n) {
      return n;
    },
        peg$c101 = peg$otherExpectation("Attribute value"),
        peg$c102 = function peg$c102(name, attributes) {
      return new ast.Helper(name, attributes, location());
    },
        peg$c103 = function peg$c103(start, v) {
      return v;
    },
        peg$c104 = function peg$c104(start, rest) {
      rest.unshift(start);
      return rest;
    },
        peg$c105 = function peg$c105(name, value) {
      return new ast.HelperAttribute(name, value, location());
    },
        peg$c106 = function peg$c106(value) {
      return new ast.HelperAttribute(null, value, location());
    },
        peg$c107 = function peg$c107(value, c) {
      return c;
    },
        peg$c108 = function peg$c108(value, ts) {
      return new ast.TransformValue(value, ts, location());
    },
        peg$c109 = function peg$c109(name, first, v) {
      return v;
    },
        peg$c110 = function peg$c110(name, first, rest) {
      rest.unshift(first);
      return new ast.Transformer(name, rest, location());
    },
        peg$c111 = function peg$c111(s) {
      return new ast.StringValue(s, location());
    },
        peg$c112 = function peg$c112(n) {
      return new ast.NumberValue(n, location());
    },
        peg$c113 = function peg$c113(b) {
      return new ast.BooleanValue(b, location());
    },
        peg$c114 = "null",
        peg$c115 = peg$literalExpectation("null", false),
        peg$c116 = function peg$c116() {
      return new ast.NullValue(location());
    },
        peg$c117 = function peg$c117(i) {
      return new ast.IdentifierValue(i, location());
    },
        peg$c118 = /^[.\/]/,
        peg$c119 = peg$classExpectation([".", "/"], false, false),
        peg$c120 = function peg$c120(p, s) {
      return new ast.IdentifierValue(p + s, location());
    },
        peg$c121 = peg$otherExpectation("Compare Operator"),
        peg$c122 = "==",
        peg$c123 = peg$literalExpectation("==", false),
        peg$c124 = ">=",
        peg$c125 = peg$literalExpectation(">=", false),
        peg$c126 = "<=",
        peg$c127 = peg$literalExpectation("<=", false),
        peg$c128 = ">",
        peg$c129 = peg$literalExpectation(">", false),
        peg$c130 = "<",
        peg$c131 = peg$literalExpectation("<", false),
        peg$c132 = "!=",
        peg$c133 = peg$literalExpectation("!=", false),
        peg$c134 = function peg$c134() {
      return new ast.CompareOperatorValue(text(), location());
    },
        peg$c135 = peg$otherExpectation("Blank line"),
        peg$c136 = peg$otherExpectation("Identifier"),
        peg$c137 = /^[a-zA-Z$@_]/,
        peg$c138 = peg$classExpectation([["a", "z"], ["A", "Z"], "$", "@", "_"], false, false),
        peg$c139 = /^[a-zA-Z0-9$_\-]/,
        peg$c140 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "$", "_", "-"], false, false),
        peg$c141 = function peg$c141(start, rest) {
      return start + rest;
    },
        peg$c142 = peg$otherExpectation("End of line"),
        peg$c143 = "\n",
        peg$c144 = peg$literalExpectation("\n", false),
        peg$c145 = "\r",
        peg$c146 = peg$literalExpectation("\r", false),
        peg$c147 = "\r\n",
        peg$c148 = peg$literalExpectation("\r\n", false),
        peg$c149 = peg$otherExpectation("Whitespace"),
        peg$c150 = "\t",
        peg$c151 = peg$literalExpectation("\t", false),
        peg$c152 = " ",
        peg$c153 = peg$literalExpectation(" ", false),
        peg$c154 = "\x0B",
        peg$c155 = peg$literalExpectation("\x0B", false),
        peg$c156 = "\f",
        peg$c157 = peg$literalExpectation("\f", false),
        peg$c158 = peg$otherExpectation("Indents"),
        peg$c159 = function peg$c159(spaces) {
      if (IDT_TOK === null) IDT_TOK = spaces;
      return spaces.length % IDT_TOK.length === 0;
    },
        peg$c160 = function peg$c160(spaces) {
      return spaces.length / IDT_TOK.length;
    },
        peg$c161 = function peg$c161(tabs) {
      if (IDT_TOK === null) IDT_TOK = '\t';
      return IDT_TOK === '\t';
    },
        peg$c162 = function peg$c162(tabs) {
      return tabs.length;
    },
        peg$c163 = peg$otherExpectation("Quoted string"),
        peg$c164 = "\"",
        peg$c165 = peg$literalExpectation("\"", false),
        peg$c166 = function peg$c166(chars) {
      return chars;
    },
        peg$c167 = "'",
        peg$c168 = peg$literalExpectation("'", false),
        peg$c169 = peg$otherExpectation("Double quoted string char"),
        peg$c170 = function peg$c170() {
      return text();
    },
        peg$c171 = function peg$c171(char) {
      return char;
    },
        peg$c172 = peg$otherExpectation("Single quoted string char"),
        peg$c173 = peg$otherExpectation("Escaped char"),
        peg$c174 = "0",
        peg$c175 = peg$literalExpectation("0", false),
        peg$c176 = /^[0-9]/,
        peg$c177 = peg$classExpectation([["0", "9"]], false, false),
        peg$c178 = function peg$c178() {
      return '\0';
    },
        peg$c179 = /^[nfrt]/,
        peg$c180 = peg$classExpectation(["n", "f", "r", "t"], false, false),
        peg$c181 = function peg$c181(c) {
      return '\\' + c;
    },
        peg$c182 = "b",
        peg$c183 = peg$literalExpectation("b", false),
        peg$c184 = function peg$c184() {
      return '\x0B';
    },
        peg$c185 = peg$otherExpectation("Boolean"),
        peg$c186 = "true",
        peg$c187 = peg$literalExpectation("true", false),
        peg$c188 = function peg$c188() {
      return true;
    },
        peg$c189 = "false",
        peg$c190 = peg$literalExpectation("false", false),
        peg$c191 = function peg$c191() {
      return false;
    },
        peg$c192 = peg$otherExpectation("Number"),
        peg$c193 = /^[+\-]/,
        peg$c194 = peg$classExpectation(["+", "-"], false, false),
        peg$c195 = function peg$c195(sign, n) {
      return sign === '-' ? -n : n;
    },
        peg$c196 = "0x",
        peg$c197 = peg$literalExpectation("0x", true),
        peg$c198 = /^[0-9a-f]/i,
        peg$c199 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
        peg$c200 = function peg$c200() {
      return parseInt(text(), 16);
    },
        peg$c201 = /^[0-7]/,
        peg$c202 = peg$classExpectation([["0", "7"]], false, false),
        peg$c203 = function peg$c203() {
      return parseInt(text(), 8);
    },
        peg$c204 = function peg$c204() {
      return parseFloat(text());
    },
        peg$c205 = /^[1-9]/,
        peg$c206 = peg$classExpectation([["1", "9"]], false, false),
        peg$c207 = "e",
        peg$c208 = peg$literalExpectation("e", true),
        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{ line: 1, column: 1 }],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return;
      }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }

    function peg$parsestart() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsedeclare_line();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblank_line();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblank_line();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenodes();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblank_line();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblank_line();
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parse_();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parse_();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedeclare_line() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c1) {
        s1 = peg$c1;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c2);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = [];
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parse_();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseidentifier();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                peg$silentFails++;
                s8 = peg$currPos;
                s9 = [];
                s10 = peg$parse_();
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = peg$parse_();
                }
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s10 = peg$c3;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c4);
                    }
                  }
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                peg$silentFails--;
                if (s8 === peg$FAILED) {
                  s7 = void 0;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s4;
                  s5 = peg$c5(s3, s6);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = [];
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parse_();
                }
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsekey_value_pair();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c6(s3, s4, s8);
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = [];
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parse_();
                  }
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsekey_value_pair();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c6(s3, s4, s8);
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseeol();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c7(s3, s4, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekey_value_pair() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c4);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$currPos;
              peg$silentFails++;
              s9 = peg$parse_();
              if (s9 === peg$FAILED) {
                s9 = peg$parseeol();
              }
              peg$silentFails--;
              if (s9 === peg$FAILED) {
                s8 = void 0;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s9 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c8);
                  }
                }
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$currPos;
                peg$silentFails++;
                s9 = peg$parse_();
                if (s9 === peg$FAILED) {
                  s9 = peg$parseeol();
                }
                peg$silentFails--;
                if (s9 === peg$FAILED) {
                  s8 = void 0;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s9 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c8);
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = input.substring(s5, peg$currPos);
              } else {
                s5 = s6;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c9(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenodes() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenode();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsenode_sep();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsenode();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c10(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsenode_sep();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsenode();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c10(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenode() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsenode_parent();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsenode_child();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsenode_child();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c12(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenode_parent() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsetag_body();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenode_child() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsenode_sep();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenode_indent();
        if (s2 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s3 = peg$c14(s2);
          if (s3) {
            s3 = void 0;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsenode();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c15(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          if (peg$c16.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c17);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parse_();
              }
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsenode();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c18(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s2 = peg$c19;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c20);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parse_();
                }
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsenode();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c21(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsetag_text();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c22(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsenode_sep() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeol();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseblank_line();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseblank_line();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c23();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenode_indent() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseidt();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetag_body() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsenode_indent();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenamespace();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsetag_class();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsetag_class();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetag_id();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsetag_class();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsetag_class();
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = peg$currPos;
                  s7 = peg$c25(s2, s3, s4, s5, s6);
                  if (s7) {
                    s7 = void 0;
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseattr_groups();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsetag_extra();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c26(s2, s3, s4, s5, s6, s8, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenamespace();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 124) {
            s2 = peg$c27;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c28);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseattr_groups();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c29(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 35) {
            s1 = peg$c30;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c31);
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c32();
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsenamespace() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c33;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c34);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parse_();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c35(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetag_class() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c36;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c37);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c35(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetag_id() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c30;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c31);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c35(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetag_extra() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c38;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c39);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseextra_values();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c40(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseextra_values() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c41;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c42);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseextra_value();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parse_();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseextra_value();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c43(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$parse_();
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parse_();
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseextra_value();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s6 = peg$c43(s3, s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parse_();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parse_();
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c44;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c45);
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c46(s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseextra_value() {
      var s0;

      s0 = peg$parsenormal_value();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecompare_value();
      }

      return s0;
    }

    function peg$parsetag_text() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c47) {
          s2 = peg$c47;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c48);
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s3 = peg$c49();
          if (s3) {
            s3 = void 0;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseeol();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetag_text_lines();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c50(s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s2 = peg$c36;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c37);
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s3 = peg$c51();
            if (s3) {
              s3 = void 0;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parse_();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parse_();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseeol();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsetag_text_lines();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c50(s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            s3 = peg$currPos;
            if (peg$c52.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c53);
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = void 0;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsetext_to_end();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c54(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parsetag_text_lines() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsettl();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseeol();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsettl();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c55(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseeol();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsettl();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c55(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c56(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsettl() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$c58(s1);
        if (s2) {
          s2 = void 0;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetext_to_end();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c59(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseeol();
          peg$silentFails--;
          if (s5 !== peg$FAILED) {
            peg$currPos = s4;
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c60(s3);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c61(s1);
        }
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c57);
        }
      }

      return s0;
    }

    function peg$parsetext_to_end() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      s1 = peg$parsestatic_text();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedynamic_text();
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsestatic_text();
          if (s1 === peg$FAILED) {
            s1 = peg$parsedynamic_text();
          }
        }
      } else {
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c62);
        }
      }

      return s0;
    }

    function peg$parsestatic_text() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseplain_text();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c63) {
          s2 = peg$c63;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c64);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseplain_text();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c65(s3);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s2 = peg$c66;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c67);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseplain_text();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c68(s3);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c69(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseplain_text() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseeol();
      if (s4 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 36) {
          s4 = peg$c70;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c71);
          }
        }
        if (s4 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s4 = peg$c66;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c67);
            }
          }
        }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = void 0;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c8);
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseeol();
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 36) {
              s4 = peg$c70;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c71);
              }
            }
            if (s4 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 92) {
                s4 = peg$c66;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c67);
                }
              }
            }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c8);
              }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsedynamic_text() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 36) {
        s1 = peg$c70;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c71);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier_value();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c41;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c42);
            }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c72(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 36) {
          s1 = peg$c70;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c71);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsehelper();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c73(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseattr_groups() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseattr_group();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parse_();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parse_();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseattr_group();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c74(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseattr_group();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c74(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattr_group() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c41;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c42);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseattr_pairs();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parse_();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parse_();
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c44;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c45);
                  }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseattr_settings();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c75(s4, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c41;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c42);
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseeol();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseattr_lines();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parse_();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parse_();
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseeol();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    s8 = [];
                    s9 = peg$parse_();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parse_();
                    }
                    if (s8 !== peg$FAILED) {
                      s7 = input.substring(s7, peg$currPos);
                    } else {
                      s7 = s8;
                    }
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = peg$currPos;
                      s8 = peg$c76(s4, s7);
                      if (s8) {
                        s8 = void 0;
                      } else {
                        s8 = peg$FAILED;
                      }
                      if (s8 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s9 = peg$c44;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c45);
                          }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseattr_settings();
                          if (s10 === peg$FAILED) {
                            s10 = null;
                          }
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c77(s4, s7, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseattr_lines() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseattr_line();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parse_();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parse_();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseeol();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseattr_line();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c78(s1, s6);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseeol();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseattr_line();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c78(s1, s6);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c79(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattr_line() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$c80(s1);
        if (s2) {
          s2 = void 0;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattr_pairs();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c81(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattr_pairs() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseattr_pair();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parse_();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parse_();
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c82;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c83);
            }
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse_();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse_();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseattr_pair();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c84(s1, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c82;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c83);
              }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseattr_pair();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c84(s1, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattr_pair() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsenamespace();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s6 = peg$c3;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c4);
              }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c86(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenamespace();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseidentifier();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c3;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c4);
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parse_();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parse_();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseattr_values();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c87(s1, s2, s7);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c88(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = [];
          s3 = peg$parse_();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseattr_values();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c89(s3);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c90(s1);
          }
          s0 = s1;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c85);
        }
      }

      return s0;
    }

    function peg$parseattr_settings() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 38) {
          s2 = peg$c92;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c93);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$currPos;
          s5 = [];
          if (peg$c94.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c95);
            }
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c94.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c95);
              }
            }
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s6 = peg$c96;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c97);
              }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifier();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                  s7 = peg$c41;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c42);
                  }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseattr_pairs();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s9 = peg$c44;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c45);
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s6;
                      s7 = peg$c98(s5, s8);
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c99(s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c91);
        }
      }

      return s0;
    }

    function peg$parseattr_values() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseattr_value();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parse_();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parse_();
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s5 = peg$c19;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c20);
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse_();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse_();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseattr_value();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c100(s1, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s5 = peg$c19;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c20);
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseattr_value();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c100(s1, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattr_value() {
      var s0;

      peg$silentFails++;
      s0 = peg$parsehelper();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenormal_value();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        if (peg$silentFails === 0) {
          peg$fail(peg$c101);
        }
      }

      return s0;
    }

    function peg$parsehelper() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c41;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c42);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsehelper_attrs();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parse_();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parse_();
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c44;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c45);
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c102(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehelper_attrs() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsehelper_attr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parse_();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parse_();
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c82;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c83);
            }
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse_();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse_();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsehelper_attr();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c103(s1, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c82;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c83);
              }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsehelper_attr();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c103(s1, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c104(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehelper_attr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c4);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsehelper_value();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c105(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsehelper_value();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c106(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsetransform() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsenormal_value();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parse_();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parse_();
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 124) {
            s5 = peg$c27;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c28);
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse_();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse_();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetransformer();
              if (s7 === peg$FAILED) {
                s7 = peg$parsenormal_value();
              }
              if (s7 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c107(s1, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 124) {
                s5 = peg$c27;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c28);
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parse_();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parse_();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetransformer();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsenormal_value();
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c107(s1, s7);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c108(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetransformer() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c41;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c42);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsenormal_value();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = [];
              s8 = peg$parse_();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parse_();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsenormal_value();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c109(s1, s4, s8);
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = [];
                s8 = peg$parse_();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parse_();
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsenormal_value();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c109(s1, s4, s8);
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parse_();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parse_();
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c44;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c45);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c110(s1, s4, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestring_value() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsequoted_string();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c111(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenumber_value() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenumber();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c112(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseboolean_value() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseboolean();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c113(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenull_value() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c114) {
        s1 = peg$c114;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c115);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c116();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseidentifier_value() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsedot_identifier();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c117(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsepath_identifier_value() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c118.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c119);
        }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c118.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c119);
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedot_identifier();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c120(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecompare_value() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c122) {
        s1 = peg$c122;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c123);
        }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c124) {
          s1 = peg$c124;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c125);
          }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c126) {
            s1 = peg$c126;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c127);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s1 = peg$c128;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c129);
              }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 60) {
                s1 = peg$c130;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c131);
                }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c132) {
                  s1 = peg$c132;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c133);
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c134();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c121);
        }
      }

      return s0;
    }

    function peg$parsenormal_value() {
      var s0;

      s0 = peg$parsestring_value();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenumber_value();
        if (s0 === peg$FAILED) {
          s0 = peg$parseboolean_value();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenull_value();
            if (s0 === peg$FAILED) {
              s0 = peg$parseidentifier_value();
              if (s0 === peg$FAILED) {
                s0 = peg$parsepath_identifier_value();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsehelper_value() {
      var s0;

      s0 = peg$parsetransform();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenormal_value();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecompare_value();
        }
      }

      return s0;
    }

    function peg$parseblank_line() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeol();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c135);
        }
      }

      return s0;
    }

    function peg$parsedot_identifier() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s5 = peg$c36;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c37);
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseidentifier();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c36;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c37);
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseidentifier();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c136);
        }
      }

      return s0;
    }

    function peg$parseidentifier() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c137.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c138);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c139.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c140);
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c139.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c140);
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c141(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c136);
        }
      }

      return s0;
    }

    function peg$parseeol() {
      var s0;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c143;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c144);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c145;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c146);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c147) {
            s0 = peg$c147;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c148);
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        if (peg$silentFails === 0) {
          peg$fail(peg$c142);
        }
      }

      return s0;
    }

    function peg$parse_() {
      var s0;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 9) {
        s0 = peg$c150;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c151);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s0 = peg$c152;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c153);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 11) {
            s0 = peg$c154;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c155);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 12) {
              s0 = peg$c156;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c157);
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        if (peg$silentFails === 0) {
          peg$fail(peg$c149);
        }
      }

      return s0;
    }

    function peg$parseidt() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s3 = peg$c152;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c153);
        }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.charCodeAt(peg$currPos) === 32) {
            s3 = peg$c152;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c153);
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$c159(s1);
        if (s2) {
          s2 = void 0;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c160(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        if (input.charCodeAt(peg$currPos) === 9) {
          s3 = peg$c150;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c151);
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (input.charCodeAt(peg$currPos) === 9) {
              s3 = peg$c150;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c151);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s2 = peg$c161(s1);
          if (s2) {
            s2 = void 0;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c162(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c158);
        }
      }

      return s0;
    }

    function peg$parsequoted_string() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c164;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c165);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parsedqs();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsedqs();
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c164;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c165);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c166(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c167;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c168);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = peg$parsesqs();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsesqs();
          }
          if (s3 !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c167;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c168);
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c166(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c163);
        }
      }

      return s0;
    }

    function peg$parsedqs() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c164;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c165);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c66;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c67);
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseeol();
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c8);
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c170();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c66;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c67);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseec();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c171(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c169);
        }
      }

      return s0;
    }

    function peg$parsesqs() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c167;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c168);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c66;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c67);
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseeol();
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c8);
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c170();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c66;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c67);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseec();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c171(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c172);
        }
      }

      return s0;
    }

    function peg$parseec() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c174;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c175);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (peg$c176.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c177);
          }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c178();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s0 = peg$c164;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c165);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s0 = peg$c167;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c168);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
              s0 = peg$c66;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c67);
              }
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (peg$c179.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c180);
                }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c181(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 98) {
                  s1 = peg$c182;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c183);
                  }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c184();
                }
                s0 = s1;
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c173);
        }
      }

      return s0;
    }

    function peg$parseboolean() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c186) {
        s1 = peg$c186;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c187);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c188();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c189) {
          s1 = peg$c189;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c190);
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c191();
        }
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c185);
        }
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c193.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c194);
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber_def();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c195(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c192);
        }
      }

      return s0;
    }

    function peg$parsenumber_def() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c196) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c197);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c198.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c199);
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c198.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c199);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c200();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c174;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c175);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c201.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c202);
            }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c201.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c202);
                }
              }
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c203();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseint();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s2 = peg$c36;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c37);
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              if (peg$c176.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c177);
                }
              }
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  if (peg$c176.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c177);
                    }
                  }
                }
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseexponent();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c204();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseint();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexponent();
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c204();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseint() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c205.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c206);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c176.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c177);
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c176.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c177);
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s0 = peg$c174;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c175);
          }
        }
      }

      return s0;
    }

    function peg$parseexponent() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c207) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c208);
        }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c193.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c194);
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseint();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    var parents = [];
    var ast = options.ast;
    var parent = function parent() {
      return parents[parents.length - 1];
    };
    var flatSibling = function flatSibling(nodes) {
      return nodes.reduce(function (acc, item) {
        acc.push(item);
        while (acc[acc.length - 1].sibling) {
          var last = acc[acc.length - 1];
          acc.push(last.sibling);
          delete last.sibling;
        }
        return acc;
      }, []);
    };

    var IDT = 0;
    var IDT_TOK = null;
    var textIndent = 0;

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
  }

  var syntax = {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
  var syntax_1 = syntax.parse;

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  (function (NodeType) {
      NodeType[NodeType["Declaration"] = 0] = "Declaration";
      NodeType[NodeType["Tag"] = 1] = "Tag";
      NodeType[NodeType["TagExtra"] = 2] = "TagExtra";
      NodeType[NodeType["AttributeGroup"] = 3] = "AttributeGroup";
      NodeType[NodeType["Attribute"] = 4] = "Attribute";
      NodeType[NodeType["Setting"] = 5] = "Setting";
      NodeType[NodeType["StringValue"] = 6] = "StringValue";
      NodeType[NodeType["BooleanValue"] = 7] = "BooleanValue";
      NodeType[NodeType["NumberValue"] = 8] = "NumberValue";
      NodeType[NodeType["NullValue"] = 9] = "NullValue";
      NodeType[NodeType["IdentifierValue"] = 10] = "IdentifierValue";
      NodeType[NodeType["CompareOperator"] = 11] = "CompareOperator";
      NodeType[NodeType["Transformer"] = 12] = "Transformer";
      NodeType[NodeType["TransformValue"] = 13] = "TransformValue";
      NodeType[NodeType["Helper"] = 14] = "Helper";
      NodeType[NodeType["HelperAttribute"] = 15] = "HelperAttribute";
      NodeType[NodeType["StaticText"] = 16] = "StaticText";
      NodeType[NodeType["DynamicText"] = 17] = "DynamicText";
  })(exports.NodeType || (exports.NodeType = {}));

  var SleetNode = function () {
      function SleetNode(type, location) {
          classCallCheck(this, SleetNode);

          this._type = type;
          this._location = location;
      }

      createClass(SleetNode, [{
          key: "type",
          get: function get$$1() {
              return this._type;
          }
      }, {
          key: "location",
          get: function get$$1() {
              return this._location;
          }
      }]);
      return SleetNode;
  }();

  var NamedParentNode = function (_SleetNode) {
      inherits(NamedParentNode, _SleetNode);

      function NamedParentNode(name, type, location) {
          classCallCheck(this, NamedParentNode);

          var _this = possibleConstructorReturn(this, (NamedParentNode.__proto__ || Object.getPrototypeOf(NamedParentNode)).call(this, type, location));

          _this._name = name;
          return _this;
      }

      createClass(NamedParentNode, [{
          key: "name",
          get: function get$$1() {
              return this._name;
          }
      }]);
      return NamedParentNode;
  }(SleetNode);

  var NamedNode = function (_NamedParentNode) {
      inherits(NamedNode, _NamedParentNode);

      function NamedNode() {
          classCallCheck(this, NamedNode);
          return possibleConstructorReturn(this, (NamedNode.__proto__ || Object.getPrototypeOf(NamedNode)).apply(this, arguments));
      }

      return NamedNode;
  }(NamedParentNode);

  var NullableNamedNode = function (_NamedParentNode2) {
      inherits(NullableNamedNode, _NamedParentNode2);

      function NullableNamedNode() {
          classCallCheck(this, NullableNamedNode);
          return possibleConstructorReturn(this, (NullableNamedNode.__proto__ || Object.getPrototypeOf(NullableNamedNode)).apply(this, arguments));
      }

      return NullableNamedNode;
  }(NamedParentNode);

  var SleetValue = function (_SleetNode2) {
      inherits(SleetValue, _SleetNode2);

      function SleetValue(value, type, location) {
          classCallCheck(this, SleetValue);

          var _this4 = possibleConstructorReturn(this, (SleetValue.__proto__ || Object.getPrototypeOf(SleetValue)).call(this, type, location));

          _this4._value = value;
          return _this4;
      }

      createClass(SleetValue, [{
          key: "toHTMLString",
          value: function toHTMLString() {
              return this._value + '';
          }
      }, {
          key: "value",
          get: function get$$1() {
              return this._value;
          }
      }]);
      return SleetValue;
  }(SleetNode);

  var StringValue = function (_SleetValue) {
      inherits(StringValue, _SleetValue);

      function StringValue(value, location) {
          classCallCheck(this, StringValue);
          return possibleConstructorReturn(this, (StringValue.__proto__ || Object.getPrototypeOf(StringValue)).call(this, value, exports.NodeType.StringValue, location));
      }

      createClass(StringValue, [{
          key: "toHTMLString",
          value: function toHTMLString() {
              return "\"" + this._value.replace(/"/g, '\\"') + "\"";
          }
      }]);
      return StringValue;
  }(SleetValue);

  var BooleanValue = function (_SleetValue2) {
      inherits(BooleanValue, _SleetValue2);

      function BooleanValue(value, location) {
          classCallCheck(this, BooleanValue);
          return possibleConstructorReturn(this, (BooleanValue.__proto__ || Object.getPrototypeOf(BooleanValue)).call(this, value, exports.NodeType.BooleanValue, location));
      }

      return BooleanValue;
  }(SleetValue);

  var NumberValue = function (_SleetValue3) {
      inherits(NumberValue, _SleetValue3);

      function NumberValue(value, location) {
          classCallCheck(this, NumberValue);
          return possibleConstructorReturn(this, (NumberValue.__proto__ || Object.getPrototypeOf(NumberValue)).call(this, value, exports.NodeType.NumberValue, location));
      }

      return NumberValue;
  }(SleetValue);

  var NullValue = function (_SleetValue4) {
      inherits(NullValue, _SleetValue4);

      function NullValue(location) {
          classCallCheck(this, NullValue);
          return possibleConstructorReturn(this, (NullValue.__proto__ || Object.getPrototypeOf(NullValue)).call(this, null, exports.NodeType.NullValue, location));
      }

      return NullValue;
  }(SleetValue);

  var IdentifierValue = function (_SleetValue5) {
      inherits(IdentifierValue, _SleetValue5);

      function IdentifierValue(value, location) {
          classCallCheck(this, IdentifierValue);
          return possibleConstructorReturn(this, (IdentifierValue.__proto__ || Object.getPrototypeOf(IdentifierValue)).call(this, value, exports.NodeType.IdentifierValue, location));
      }

      return IdentifierValue;
  }(SleetValue);

  var CompareOperatorValue = function (_SleetValue6) {
      inherits(CompareOperatorValue, _SleetValue6);

      function CompareOperatorValue(value, location) {
          classCallCheck(this, CompareOperatorValue);
          return possibleConstructorReturn(this, (CompareOperatorValue.__proto__ || Object.getPrototypeOf(CompareOperatorValue)).call(this, value, exports.NodeType.CompareOperator, location));
      }

      return CompareOperatorValue;
  }(SleetValue);

  var Transformer = function (_NamedNode) {
      inherits(Transformer, _NamedNode);

      function Transformer(name, params, location) {
          classCallCheck(this, Transformer);

          var _this11 = possibleConstructorReturn(this, (Transformer.__proto__ || Object.getPrototypeOf(Transformer)).call(this, name, exports.NodeType.Transformer, location));

          _this11._params = params || [];
          return _this11;
      }

      createClass(Transformer, [{
          key: "toHTMLString",
          value: function toHTMLString() {
              return this.name + "(" + this._params.map(function (it) {
                  return it.toHTMLString();
              }).join(' ') + ")";
          }
      }, {
          key: "params",
          get: function get$$1() {
              return this._params;
          }
      }]);
      return Transformer;
  }(NamedNode);

  var TransformValue = function (_SleetValue7) {
      inherits(TransformValue, _SleetValue7);

      function TransformValue(value, transformers, location) {
          classCallCheck(this, TransformValue);

          var _this12 = possibleConstructorReturn(this, (TransformValue.__proto__ || Object.getPrototypeOf(TransformValue)).call(this, value, exports.NodeType.TransformValue, location));

          _this12._transformers = transformers || [];
          return _this12;
      }

      createClass(TransformValue, [{
          key: "toHTMLString",
          value: function toHTMLString() {
              return "" + this._value.toHTMLString() + this._transformers.map(function (it) {
                  return " | " + it.toHTMLString();
              }).join('');
          }
      }, {
          key: "transformers",
          get: function get$$1() {
              return this._transformers;
          }
      }]);
      return TransformValue;
  }(SleetValue);

  var HelperAttribute = function (_NullableNamedNode) {
      inherits(HelperAttribute, _NullableNamedNode);

      function HelperAttribute(name, value, location) {
          classCallCheck(this, HelperAttribute);

          var _this13 = possibleConstructorReturn(this, (HelperAttribute.__proto__ || Object.getPrototypeOf(HelperAttribute)).call(this, name, exports.NodeType.HelperAttribute, location));

          _this13._value = value;
          return _this13;
      }

      createClass(HelperAttribute, [{
          key: "toHTMLString",
          value: function toHTMLString() {
              return "" + (this.name ? this.name + '=' : '') + this.value.toHTMLString();
          }
      }, {
          key: "value",
          get: function get$$1() {
              return this._value;
          }
      }]);
      return HelperAttribute;
  }(NullableNamedNode);

  var Helper = function (_NullableNamedNode2) {
      inherits(Helper, _NullableNamedNode2);

      function Helper(name, attributes, location) {
          classCallCheck(this, Helper);

          var _this14 = possibleConstructorReturn(this, (Helper.__proto__ || Object.getPrototypeOf(Helper)).call(this, name, exports.NodeType.Helper, location));

          _this14._attributes = attributes || [];
          return _this14;
      }

      createClass(Helper, [{
          key: "toHTMLString",
          value: function toHTMLString() {
              return (this.name ? this.name : '') + "(" + this._attributes.map(function (it) {
                  return it.toHTMLString();
              }).join(' ') + ")";
          }
      }, {
          key: "attributes",
          get: function get$$1() {
              return this._attributes;
          }
      }]);
      return Helper;
  }(NullableNamedNode);

  var StaticText = function (_SleetValue8) {
      inherits(StaticText, _SleetValue8);

      function StaticText(value, location) {
          classCallCheck(this, StaticText);
          return possibleConstructorReturn(this, (StaticText.__proto__ || Object.getPrototypeOf(StaticText)).call(this, value, exports.NodeType.StaticText, location));
      }

      createClass(StaticText, [{
          key: "_merge",
          value: function _merge(text) {
              var o = { start: this._location.start, end: text._location.end };
              this._value += text._value;
              this._location = o;
          }
      }, {
          key: "toHTMLString",
          value: function toHTMLString() {
              return this.value;
          }
      }]);
      return StaticText;
  }(SleetValue);

  var DynamicText = function (_SleetValue9) {
      inherits(DynamicText, _SleetValue9);

      function DynamicText(value, location) {
          classCallCheck(this, DynamicText);
          return possibleConstructorReturn(this, (DynamicText.__proto__ || Object.getPrototypeOf(DynamicText)).call(this, value, exports.NodeType.DynamicText, location));
      }

      createClass(DynamicText, [{
          key: "toHTMLString",
          value: function toHTMLString() {
              return '$' + this.value.toHTMLString();
          }
      }]);
      return DynamicText;
  }(SleetValue);

  var Attribute = function (_NullableNamedNode3) {
      inherits(Attribute, _NullableNamedNode3);

      function Attribute(ns, name, values, location) {
          classCallCheck(this, Attribute);

          var _this17 = possibleConstructorReturn(this, (Attribute.__proto__ || Object.getPrototypeOf(Attribute)).call(this, name === null ? undefined : name, exports.NodeType.Attribute, location));

          _this17._values = values || [];
          _this17._namespace = ns === null ? undefined : ns;
          return _this17;
      }

      createClass(Attribute, [{
          key: "merge",
          value: function merge(other) {
              if (!this.name || this.name !== other.name || this.namespace !== other.namespace) return false;
              this._values = this._values.concat(other._values);
              return true;
          }
      }, {
          key: "values",
          get: function get$$1() {
              return this._values;
          }
      }, {
          key: "namespace",
          get: function get$$1() {
              return this._namespace;
          }
      }]);
      return Attribute;
  }(NullableNamedNode);

  var Setting = function (_NamedNode2) {
      inherits(Setting, _NamedNode2);

      function Setting(name, attributes, location) {
          classCallCheck(this, Setting);

          var _this18 = possibleConstructorReturn(this, (Setting.__proto__ || Object.getPrototypeOf(Setting)).call(this, name, exports.NodeType.Setting, location));

          _this18._attributes = attributes || [];
          return _this18;
      }

      createClass(Setting, [{
          key: "attributes",
          get: function get$$1() {
              return this._attributes;
          }
      }]);
      return Setting;
  }(NamedNode);

  var AttributeGroup = function (_SleetNode3) {
      inherits(AttributeGroup, _SleetNode3);

      function AttributeGroup(attributes, setting, location) {
          classCallCheck(this, AttributeGroup);

          var _this19 = possibleConstructorReturn(this, (AttributeGroup.__proto__ || Object.getPrototypeOf(AttributeGroup)).call(this, exports.NodeType.AttributeGroup, location));

          _this19._setting = setting;
          _this19._setAttributes(attributes || []);
          return _this19;
      }

      createClass(AttributeGroup, [{
          key: "_setAttributes",
          value: function _setAttributes(source) {
              var target = source;
              var idx = 0;

              var _loop = function _loop() {
                  var current = target;
                  target = [];
                  current.forEach(function (it, i) {
                      if (idx >= i) target.push(it);else if (!current[idx].merge(it)) target.push(it);
                  });
                  idx++;
              };

              while (idx < target.length) {
                  _loop();
              }
              this._attributes = target;
          }
      }, {
          key: "merge",
          value: function merge(other) {
              var ignoreSetting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

              if (!ignoreSetting && (other._setting || this._setting)) return false;
              var o = { start: this._location.start, end: other._location.end };
              this._setAttributes(this._attributes.concat(other._attributes));
              this._location = o;
              return true;
          }
      }, {
          key: "attributes",
          get: function get$$1() {
              return this._attributes;
          }
      }, {
          key: "setting",
          get: function get$$1() {
              return this._setting;
          }
      }]);
      return AttributeGroup;
  }(SleetNode);

  var TagExtra = function (_NamedNode3) {
      inherits(TagExtra, _NamedNode3);

      function TagExtra(name, values, location) {
          classCallCheck(this, TagExtra);

          var _this20 = possibleConstructorReturn(this, (TagExtra.__proto__ || Object.getPrototypeOf(TagExtra)).call(this, name, exports.NodeType.TagExtra, location));

          _this20._values = values || [];
          return _this20;
      }

      createClass(TagExtra, [{
          key: "values",
          get: function get$$1() {
              return this._values;
          }
      }]);
      return TagExtra;
  }(NamedNode);

  var Tag = function (_NullableNamedNode4) {
      inherits(Tag, _NullableNamedNode4);

      function Tag(indent, name, ns, dots, hash, groups, extra, location) {
          classCallCheck(this, Tag);

          var _this21 = possibleConstructorReturn(this, (Tag.__proto__ || Object.getPrototypeOf(Tag)).call(this, name, exports.NodeType.Tag, location));

          _this21._children = [];
          _this21._text = [];
          _this21._indent = indent;
          _this21._namespace = ns;
          _this21._dots = dots || [];
          _this21._hash = hash;
          _this21._extra = extra;
          _this21._setGroup(groups || []);
          return _this21;
      }

      createClass(Tag, [{
          key: "_setChildren",
          value: function _setChildren(children) {
              this._children = children;
          }
      }, {
          key: "_setText",
          value: function _setText(text) {
              this._text = (text || []).map(function (it) {
                  return it.reduce(function (acc, item) {
                      if (!acc.length) return [item];
                      if (item.type === exports.NodeType.DynamicText) return acc.concat(item);
                      var last = acc[acc.length - 1];
                      if (item.type === exports.NodeType.StaticText && last.type === exports.NodeType.StaticText) {
                          last._merge(item);
                          return acc;
                      }
                      return acc.concat(item);
                  }, []);
              });
          }
      }, {
          key: "_setGroup",
          value: function _setGroup(groups) {
              this._attributeGroups = groups.reduce(function (acc, item) {
                  if (!acc.length) return [item];
                  if (acc[acc.length - 1].merge(item)) return acc;
                  return acc.concat(item);
              }, []);
          }
      }, {
          key: "indent",
          get: function get$$1() {
              return this._indent;
          }
      }, {
          key: "dots",
          get: function get$$1() {
              return this._dots;
          }
      }, {
          key: "hash",
          get: function get$$1() {
              return this._hash;
          }
      }, {
          key: "namespace",
          get: function get$$1() {
              return this._namespace;
          }
      }, {
          key: "children",
          get: function get$$1() {
              return this._children;
          }
      }, {
          key: "attributeGroups",
          get: function get$$1() {
              return this._attributeGroups;
          }
      }, {
          key: "extra",
          get: function get$$1() {
              return this._extra;
          }
      }, {
          key: "parent",
          get: function get$$1() {
              return this._parent;
          }
      }, {
          key: "text",
          get: function get$$1() {
              return this._text;
          }
      }]);
      return Tag;
  }(NullableNamedNode);

  var Declaration = function (_NamedNode4) {
      inherits(Declaration, _NamedNode4);

      function Declaration(name, ext, pair, location) {
          classCallCheck(this, Declaration);

          var _this22 = possibleConstructorReturn(this, (Declaration.__proto__ || Object.getPrototypeOf(Declaration)).call(this, name, exports.NodeType.Declaration, location));

          _this22._options = {};
          _this22._extension = ext;
          pair.forEach(function (it) {
              return _this22._options[it.key] = it.value;
          });
          return _this22;
      }

      createClass(Declaration, [{
          key: "option",
          value: function option(key) {
              return this._options[key];
          }
      }, {
          key: "extension",
          get: function get$$1() {
              return this._extension;
          }
      }]);
      return Declaration;
  }(NamedNode);

  var ast = /*#__PURE__*/Object.freeze({
    get NodeType () { return exports.NodeType; },
    SleetNode: SleetNode,
    SleetValue: SleetValue,
    StringValue: StringValue,
    BooleanValue: BooleanValue,
    NumberValue: NumberValue,
    NullValue: NullValue,
    IdentifierValue: IdentifierValue,
    CompareOperatorValue: CompareOperatorValue,
    Transformer: Transformer,
    TransformValue: TransformValue,
    HelperAttribute: HelperAttribute,
    Helper: Helper,
    StaticText: StaticText,
    DynamicText: DynamicText,
    Attribute: Attribute,
    Setting: Setting,
    AttributeGroup: AttributeGroup,
    TagExtra: TagExtra,
    Tag: Tag,
    Declaration: Declaration
  });

  function parse(input) {
      return syntax_1(input, { ast: ast });
  }

  var Context = function () {
      function Context(options) {
          var indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
          var indentToken = arguments[2];
          var newLineToken = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '\n';
          var parent = arguments[4];
          var factories = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
          var note = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};
          classCallCheck(this, Context);

          this._result = [];
          this._options = options;
          this._indent = indent;
          this._indentToken = indentToken || '    ';
          this._newLineToken = newLineToken;
          this._parent = parent;
          this._factories = factories;
          this._note = note;
      }

      createClass(Context, [{
          key: 'register',
          value: function register() {
              var _this = this;

              for (var _len = arguments.length, factory = Array(_len), _key = 0; _key < _len; _key++) {
                  factory[_key] = arguments[_key];
              }

              factory.forEach(function (it) {
                  if (!_this._factories[it.type]) _this._factories[it.type] = [];
                  _this._factories[it.type].unshift(it);
              });
          }
      }, {
          key: 'remove',
          value: function remove(factory) {
              if (!this._factories[factory.type]) return;
              this._factories[factory.type] = this._factories[factory.type].filter(function (it) {
                  return it !== factory;
              });
          }
      }, {
          key: 'replace',
          value: function replace(from, to) {
              if (from.type !== to.type || !this._factories[from.type]) return;
              var idx = this._factories[from.type].indexOf(from);
              if (idx === -1) return;
              this._factories[from.type][idx] = to;
          }
      }, {
          key: 'create',
          value: function create(node, stack) {
              var factory = this._factories[node.type];
              if (!factory) return;
              var c = void 0;
              var idx = 0;
              while (!c && idx < factory.length) {
                  c = factory[idx].create(node, stack);
                  idx++;
              }
              return c;
          }
      }, {
          key: '_setHaveIndent',
          value: function _setHaveIndent(have) {
              if (!this._parent) return;
              this._parent._haveIndent = have;
              this._parent._setHaveIndent(have);
          }
      }, {
          key: 'indent',
          value: function indent() {
              var delta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

              if (!this.haveContent()) return this;
              var idt = '';
              for (var i = 0; i < this._indent + delta; i++) {
                  idt += this._indentToken;
              }
              this._result.push(idt);
              this._setHaveIndent(true);
              return this;
          }
      }, {
          key: 'mergeUp',
          value: function mergeUp() {
              if (this._parent) this._parent._result = this._parent._result.concat(this._result);
          }
      }, {
          key: 'push',
          value: function push(text) {
              this._result.push(text);
              return this;
          }
      }, {
          key: 'pop',
          value: function pop() {
              this._result.pop();
              return this;
          }
      }, {
          key: 'eol',
          value: function eol() {
              if (!this.haveContent()) return this;
              this._result.push(this._newLineToken);
              return this;
          }
      }, {
          key: 'sub',
          value: function sub() {
              var idt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

              return new Context(this._options, idt + this._indent + 1, this._indentToken, this._newLineToken, this, this._factories, this._note);
          }
      }, {
          key: 'haveContent',
          value: function haveContent() {
              return this._parent && this._parent.haveContent() || this._result.length !== 0;
          }
      }, {
          key: 'getOutput',
          value: function getOutput() {
              if (!this._parent) {
                  if (this._result.slice(-1)[0] !== this._newLineToken) this.eol();
              }
              return this._result.join('');
          }
      }, {
          key: 'compile',
          value: function compile(node, stack) {
              var indent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

              var compiler = this.create(node, stack);
              if (!compiler) return null;
              var sub = this.sub(indent);
              compiler.compile(sub);
              return sub;
          }
      }, {
          key: 'options',
          get: function get$$1() {
              return this._options;
          }
      }, {
          key: 'note',
          get: function get$$1() {
              return this._note;
          }
      }, {
          key: 'haveIndent',
          get: function get$$1() {
              return this._haveIndent;
          }
      }]);
      return Context;
  }();

  function compile(input, options) {
      var result = parse(input);
      if (options.compile) {
          return options.compile(result, options);
      }
      var name = '';
      if (result.declaration) {
          name = result.declaration.name;
      }
      if (!name && options.defaultPlugin) name = options.defaultPlugin;
      if (name && typeof name === 'string' && options.plugins && options.plugins[name]) {
          name = options.plugins[name];
      }
      if (!name) name = 'html';
      if (name && typeof name === 'string') {
          if (name.slice(0, 6) === 'sleet-') name = name.slice(6);
          var o = require(name);
          name = o.plugin;
      }
      var context = new Context(options, 0, result.indent, options.newLineToken || '\n');
      var plugin = name;
      if (plugin.prepare) plugin.prepare(context);
      return plugin.compile(result, options, context);
  }

  exports.Context = Context;
  exports.parse = parse;
  exports.compile = compile;
  exports.SleetNode = SleetNode;
  exports.SleetValue = SleetValue;
  exports.StringValue = StringValue;
  exports.BooleanValue = BooleanValue;
  exports.NumberValue = NumberValue;
  exports.NullValue = NullValue;
  exports.IdentifierValue = IdentifierValue;
  exports.CompareOperatorValue = CompareOperatorValue;
  exports.Transformer = Transformer;
  exports.TransformValue = TransformValue;
  exports.HelperAttribute = HelperAttribute;
  exports.Helper = Helper;
  exports.StaticText = StaticText;
  exports.DynamicText = DynamicText;
  exports.Attribute = Attribute;
  exports.Setting = Setting;
  exports.AttributeGroup = AttributeGroup;
  exports.TagExtra = TagExtra;
  exports.Tag = Tag;
  exports.Declaration = Declaration;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=sleet.min.js.map
